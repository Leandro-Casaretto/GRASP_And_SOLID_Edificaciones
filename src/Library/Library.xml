<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Library</name>
    </assembly>
    <members>
        <member name="M:Full_GRASP_And_SOLID.Library.Building.getTasks">
            <summary>
            Devolvemos las tasks
            </summary>
        </member>
        <member name="M:Full_GRASP_And_SOLID.Library.Building.AddTask(Full_GRASP_And_SOLID.Library.Supply,System.Double,Full_GRASP_And_SOLID.Library.Tool,System.Int32)">
            <summary>
            Modificando el método AddTask, logramos que la clase Building tenga el control de todas
            las tasks(le agregamos la responsabilidad de agregarlas), por lo cual estamos 
            hablando de una composición. Con todo esto nos aseguramos de que cuando se quieran agregar tasks
            al building, sea este el mismo que las crea.
            
            </summary>
        </member>
        <member name="M:Full_GRASP_And_SOLID.Library.Building.GetProductionCost">
            <summary>
            Creamos método GetProductionCost
            Al ser Building la clase experta en información, le asignamos la responsabilidad de
            calcular el costo (Patrón Expert)
            </summary>
        </member>
        <member name="M:Full_GRASP_And_SOLID.Library.ConsolePrinter.PrintBuilding(Full_GRASP_And_SOLID.Library.IPrintable)">
            <summary>
            Ahora que aplicamos DIP, en vez de pasarle como parámetro un Building, le pasamos como
            parámetro un objeto de tipo IPrintable.
            </summary>
        </member>
        <member name="T:Full_GRASP_And_SOLID.Library.Empty">
            <summary>
            Creamos la excepción que intervendrá cuando no se encuentren tasks
            </summary>
        </member>
        <member name="M:Full_GRASP_And_SOLID.Library.FilePrinter.PrintBuilding(Full_GRASP_And_SOLID.Library.IPrintable)">
            <summary>
            Ahora que aplicamos DIP, en vez de pasarle como parámetro un Building, le pasamos como
            parámetro un objeto de tipo IPrintable.
            </summary>
        </member>
        <member name="T:Full_GRASP_And_SOLID.Library.ICostable">
            <summary>
            Explicacion ISP
            </summary>
        </member>
        <member name="T:Full_GRASP_And_SOLID.Library.IPrintable">
            <summary>
            Para poder aplicar el principio de inversión de dependencias, 
            lo que hacemos es definir la abstracción de la que queremos que ConsolePrinter, FilePrinter
            y Building dependan. Para esto creamos la interfaz IPrintable cob el método
            GetTextToPrint()
            </summary>
        </member>
        <member name="T:Full_GRASP_And_SOLID.Library.IPrinter">
            <summary>
            Al crear la interfaz IPrinter, lo que logramos es independizarnos de cualquier implementación.
            De esta manera, cramos clases que implementen la interfaz cada vez que querramos tener una nueva forma
            de impresión. (Patrón utilizado: Polimorfismo)
            </summary>
        </member>
        <member name="T:Full_GRASP_And_SOLID.Library.Printer">
            <summary>
            La siguiente clase es la encargada de imprimir en consola. Al crear esta clase, le quitamos la
            responsabilidad a Building de hacerlo, lo cual evita tener que cambiar esa clase cada vez
            que querramos hacer un cambio en la manera de imprimir. (Principio utilizado: SRP)
            </summary>
        </member>
    </members>
</doc>
